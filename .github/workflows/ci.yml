name: ASPICE CI Pipeline

on:
  workflow_dispatch:
  push:
  pull_request:
    branches: [ main, master, release/** ]
  repository_dispatch:
    types: [issue-retest]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Verify dependencies
        run: go mod verify
        
      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          
      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m
        
      - name: Format check
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted properly:"
            gofmt -l .
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Build packages
        run: go build -v ./...
        
      - name: Build executable
        run: make build
        
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: |
            calc

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Test with coverage
        run: make test-coverage
        
      - name: Upload coverage to Codecov
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            ./coverage.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
        
      - name: Run gosec
        run: make security
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: results.json
          if-no-files-found: error

  notify-issue:
    name: Notify Issue
    runs-on: ubuntu-latest
    needs: [lint, build, test, security-scan]
    if: github.event_name == 'repository_dispatch' && github.event.client_payload.issue_number != ''
    steps:
      - name: Report test results back to issue
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.client_payload.issue_number }}
          body: |
            ## ✅ CI Pipeline Completed
            
            The CI pipeline triggered by #retest has completed successfully.
            
            **Issue:** #${{ github.event.client_payload.issue_number }} - ${{ github.event.client_payload.issue_title }}
            **Triggered by:** @${{ github.event.client_payload.user }}
            
            ### Results Summary:
            - ✅ Lint: Passed
            - ✅ Build: Passed
            - ✅ Tests: Passed
            - ✅ Security Scan: Passed
            
            [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
